commit 4ca196755f612093dabbd23c95842549b197a570
Author: Thomas Prescher <thomas.prescher@cyberus-technology.de>
Date:   Tue Feb 22 10:17:56 2022 +0100

    Handle buggy guest drivers gracefully.
    
    We found out that at least Windows 10 GFX drivers have an issue when sending PPGTT invalidation requests. Sometimes,
    the request is sent after the memory has already been re-used by the guest kernel for things other than a PPGTT.
    When this happens, GVT goes rogue and complains loudly about broken shadow page table entries.
    
    This patch, although not 100% bullet proof, tries to detect this situation and untracks the corresponding page. Thus,
    no broken shadow page table entries are recognized by GVT and both guest and host can contine execution.
    
    This patch drops support for 4 byte PPGTT accesses! I didn't find any situation where a Windows 10 GFX driver modifies
    a PPGTT entry using 4 byte accesses, but it does not mean that this is impossible. You have been warned.

diff --git a/gtt.c b/gtt.c
index a3a4305..e576562 100644
--- a/drivers/gpu/drm/i915/gvt/gtt.c
+++ b/drivers/gpu/drm/i915/gvt/gtt.c
@@ -938,7 +938,7 @@ static inline int ppgtt_put_spt(struct intel_vgpu_ppgtt_spt *spt)
 	return atomic_dec_return(&spt->refcount);
 }
 
-static int ppgtt_invalidate_spt(struct intel_vgpu_ppgtt_spt *spt);
+int ppgtt_invalidate_spt(struct intel_vgpu_ppgtt_spt *spt);
 
 static int ppgtt_invalidate_spt_by_shadow_entry(struct intel_vgpu *vgpu,
 		struct intel_gvt_gtt_entry *e)
@@ -995,7 +995,7 @@ static inline void ppgtt_invalidate_pte(struct intel_vgpu_ppgtt_spt *spt,
 	intel_gvt_hypervisor_dma_unmap_guest_page(vgpu, pfn << PAGE_SHIFT);
 }
 
-static int ppgtt_invalidate_spt(struct intel_vgpu_ppgtt_spt *spt)
+int ppgtt_invalidate_spt(struct intel_vgpu_ppgtt_spt *spt)
 {
 	struct intel_vgpu *vgpu = spt->vgpu;
 	struct intel_gvt_gtt_entry e;
diff --git a/page_track.c b/page_track.c
index 66090ba..1dacc6e 100644
--- a/drivers/gpu/drm/i915/gvt/page_track.c
+++ b/drivers/gpu/drm/i915/gvt/page_track.c
@@ -146,6 +146,7 @@ int intel_vgpu_disable_page_track(struct intel_vgpu *vgpu, unsigned long gfn)
 	return 0;
 }
 
+int ppgtt_invalidate_spt(struct intel_vgpu_ppgtt_spt *spt);
 /**
  * intel_vgpu_page_track_handler - called when write to write-protected page
  * @vgpu: a vGPU
@@ -161,6 +162,7 @@ int intel_vgpu_page_track_handler(struct intel_vgpu *vgpu, u64 gpa,
 {
 	struct intel_vgpu_page_track *page_track;
 	int ret = 0;
+	struct intel_vgpu_ppgtt_spt *spt = 0;
 
 	mutex_lock(&vgpu->vgpu_lock);
 
@@ -170,6 +172,21 @@ int intel_vgpu_page_track_handler(struct intel_vgpu *vgpu, u64 gpa,
 		goto out;
 	}
 
+	/**
+	 * Workaround for buggy guest drivers where the driver re-uses PPGTT memory prior to sending an invalidation command
+	 * via a g2v_notification. Under normal circumstances, the GVT code allows 4 and 8 byte write accesses to PPGTT.
+	 * Field testing has however showed that, at least when using Windows 10 as a guest, only 8 byte access are issued from the driver-
+	 * We use this knowledge here so we can detect when we get page track accesses on memoy that is not used for a PPGTT anymore.
+	 * This is of course not 100% bullet prove but it improves the situation quite a lot.
+	 */
+	if (bytes != 8) {
+		printk(KERN_ERR "Invalid PPGTT access size (%d), ignoring write and untracking page\n", bytes);
+		spt = page_track->priv_data;
+		ppgtt_invalidate_spt(spt);
+		ret = 0;
+		goto out;
+	}
+
 	if (unlikely(vgpu->failsafe)) {
 		/* Remove write protection to prevent furture traps. */
 		intel_vgpu_disable_page_track(vgpu, gpa >> PAGE_SHIFT);
